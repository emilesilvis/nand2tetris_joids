class Joid {
    field int size;
    field int positionX, positionY;
    field int velocityX, velocityY;

    constructor Joid new(int px, int py, int vx, int vy) {
        let positionX = px;
        let positionY = py;
        let velocityX = vx;
        let velocityY = vy;
        let size = 10;
        return this;
    }

    method int getPositionX() {
        return positionX;
    }

    method int getPositionY() {
        return positionY;
    }
    
    method int getVelocityX() {
        return velocityX;
    }

    method int getVelocityY() {
        return velocityY;
    }

    method void calculateSeparation(Array joids, int currentJoidsCount) {
        var Joid otherJoid;
        var int i, dx, dy, distance;
        var int separationX, separationY;
        var int minDistance, neighborCount;
        var int separationForce;
        
        let minDistance = 25;  // Increased separation distance
        let separationX = 0;
        let separationY = 0;
        let neighborCount = 0;
        let separationForce = 8;  // Separation strength multiplier
        
        // Check all other joids
        let i = 0;
        while (i < currentJoidsCount) {
            let otherJoid = joids[i];
            
            // Skip self
            if (~(otherJoid = this)) {
                // Calculate displacement vector (from neighbor to self)
                let dx = positionX - otherJoid.getPositionX();
                let dy = positionY - otherJoid.getPositionY();
                let distance = Math.abs(dx) + Math.abs(dy);  // Manhattan distance
                
                // If within separation range, accumulate displacement vector
                if (distance < minDistance) {
                    // Weight displacement by inverse distance (closer = stronger force)
                    if (distance > 0) {
                        let separationX = separationX + ((dx * separationForce) / distance);
                        let separationY = separationY + ((dy * separationForce) / distance);
                    } else {
                        // Handle edge case of identical positions
                        let separationX = separationX + separationForce;
                        let separationY = separationY + separationForce;
                    }
                    let neighborCount = neighborCount + 1;
                }
            }
            
            let i = i + 1;
        }
        
        // If we have neighbors to separate from
        if (neighborCount > 0) {
            // Calculate average displacement vector
            let separationX = separationX / neighborCount;
            let separationY = separationY / neighborCount;
            
            // Apply separation force to velocity
            let velocityX = velocityX + (separationX / 15);
            let velocityY = velocityY + (separationY / 15);
        }
        
        return;
    }

    method void calculateCohesion(Array joids, int currentJoidsCount) {
        var Joid otherJoid;
        var int i, dx, dy, distance;
        var int cohesionX, cohesionY;
        var int cohesionRange, neighborCount;
        var int centerX, centerY;
        var int cohesionForce;
        
        let cohesionRange = 60;  // Look for neighbors within this range
        let cohesionX = 0;
        let cohesionY = 0;
        let neighborCount = 0;
        let cohesionForce = 1;  // Cohesion strength
        
        // Find all neighbors and accumulate their positions
        let i = 0;
        while (i < currentJoidsCount) {
            let otherJoid = joids[i];
            
            // Skip self
            if (~(otherJoid = this)) {
                // Calculate distance
                let dx = positionX - otherJoid.getPositionX();
                let dy = positionY - otherJoid.getPositionY();
                let distance = Math.abs(dx) + Math.abs(dy);
                
                // If within cohesion range, include in local flock
                if (distance < cohesionRange) {
                    let cohesionX = cohesionX + otherJoid.getPositionX();
                    let cohesionY = cohesionY + otherJoid.getPositionY();
                    let neighborCount = neighborCount + 1;
                }
            }
            
            let i = i + 1;
        }
        
        // If we have neighbors to move towards
        if (neighborCount > 0) {
            // Calculate average position (center of mass)
            let centerX = cohesionX / neighborCount;
            let centerY = cohesionY / neighborCount;
            
            // Calculate displacement vector towards center of mass
            let dx = centerX - positionX;
            let dy = centerY - positionY;
            
            // Apply cohesion displacement to velocity with scaling
            let velocityX = velocityX + ((dx * cohesionForce) / 80);
            let velocityY = velocityY + ((dy * cohesionForce) / 80);
        }
        
        return;
    }

    method void calculateAlignment(Array joids, int currentJoidsCount) {
        var Joid otherJoid;
        var int i, dx, dy, distance;
        var int alignmentX, alignmentY;
        var int alignmentRange, neighborCount;
        var int avgVelX, avgVelY;
        var int velDiffX, velDiffY;
        var int alignmentForce;
        
        let alignmentRange = 50;  // Look for neighbors within this range
        let alignmentX = 0;
        let alignmentY = 0;
        let neighborCount = 0;
        let alignmentForce = 1;  // Alignment strength
        
        // Find all neighbors and accumulate their velocities
        let i = 0;
        while (i < currentJoidsCount) {
            let otherJoid = joids[i];
            
            // Skip self
            if (~(otherJoid = this)) {
                // Calculate distance
                let dx = positionX - otherJoid.getPositionX();
                let dy = positionY - otherJoid.getPositionY();
                let distance = Math.abs(dx) + Math.abs(dy);
                
                // If within alignment range, include in local flock
                if (distance < alignmentRange) {
                    let alignmentX = alignmentX + otherJoid.getVelocityX();
                    let alignmentY = alignmentY + otherJoid.getVelocityY();
                    let neighborCount = neighborCount + 1;
                }
            }
            
            let i = i + 1;
        }
        
        // If we have neighbors to align with
        if (neighborCount > 0) {
            // Calculate average velocity of local flock
            let avgVelX = alignmentX / neighborCount;
            let avgVelY = alignmentY / neighborCount;
            
            // Calculate velocity difference vector (displacement in velocity space)
            let velDiffX = avgVelX - velocityX;
            let velDiffY = avgVelY - velocityY;
            
            // Apply alignment displacement to velocity with scaling
            let velocityX = velocityX + ((velDiffX * alignmentForce) / 40);
            let velocityY = velocityY + ((velDiffY * alignmentForce) / 40);
        }
        
        return;
    }

    method void update(Array joids, int currentJoidsCount) {
        var int maxSpeed;
        var int velocityMagnitude;
        
        let maxSpeed = 4;  // Maximum allowed speed
        
        // Apply Boids rules in order (each modifies velocity)
        do calculateSeparation(joids, currentJoidsCount);  // Rule 1: Avoid crowding
        do calculateCohesion(joids, currentJoidsCount);    // Rule 2: Move towards center
        do calculateAlignment(joids, currentJoidsCount);   // Rule 3: Match velocity
        
        // Limit velocity magnitude to prevent excessive speeds
        let velocityMagnitude = Math.abs(velocityX) + Math.abs(velocityY);
        if (velocityMagnitude > maxSpeed) {
            let velocityX = (velocityX * maxSpeed) / velocityMagnitude;
            let velocityY = (velocityY * maxSpeed) / velocityMagnitude;
        }
        
        // Apply movement (position = position + velocity)
        let positionX = positionX + velocityX;
        let positionY = positionY + velocityY;
        
        return;
    }

    method void clear() {
        do Screen.setColor(false);
        do Screen.drawRectangle(positionX, positionY, positionX + size, positionY + size);
        return;
    }

    method void draw() {
        do calculateScreenWrap();
        do Screen.setColor(true);
        do Screen.drawRectangle(positionX, positionY, positionX + size, positionY + size);
        return;
    }

    method void calculateScreenWrap() {
        // Horizontal wrap right edge
        if ((positionX + size) > 512) {
            let positionX = 0;
        }

        // Horizontal wrap left edge
        if (positionX < 0) {
            let positionX = 512 - size;
        }

        // Vertical wrap bottom edge
        if ((positionY + size) > 256) {
            let positionY = 0;
        }

        // Vertical wrap top edge
        if (positionY < 0) {
            let positionY = 256 - size;
        }

        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}